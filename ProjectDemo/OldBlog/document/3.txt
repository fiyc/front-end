<p>&nbsp;&nbsp;今天开始了一个我自己的Android项目 好久不碰eclipse 尴尬到很多快捷键都需要百度 一些关于绘图的函数也忘记的差不多了 边做边翻书 总算是做出了个开头</p>
<p>&nbsp;&nbsp;今天完成的内容比较少 在屏幕上简单的绘制了一个球 当鼠标点击时 小球会朝着点击坐标开始运动 并且每次点击都会改变小球运动方向 速度为每个线程运动10像素 当小球触碰屏幕边框时 方向改变 并且速度加10 </p>
<p>&nbsp;&nbsp;本以为做这些会非常的容易 但实际写代码时还是遇到了2个问题</p>
<p>&nbsp;&nbsp;第一个就是关于整个项目的模型 在一个线程中需要作出小球运动计算 以及屏幕的绘制 期初零零散散的写了一些 发现代码真是乱的不行 这个时候的确体现出了面向对象思想的好处 总结了几个类及功能 分离出来了BallModel Untity 让整个项目看上去清楚了很多</p>
<p>&nbsp;&nbsp;第二个就是关于点击屏幕过后小球运动轨迹的计算 翻出草稿纸画出三角函数看了好一会才算出个公式来 脑子是越来越慢了 还记得高中这种东西简直是信手拈来啊 根本用不到打草稿 想想就出来了 </p>
<p>&nbsp;&nbsp;这一次就当做总结吧 总的来说 一个SurfaceView框架下的游戏开发 应该就是通过一个Activity 中使用 一个 SurfaceView来作为填充 同时这个SurfaceView实现了Runnable接口来实现线程 在每一个循环中来进行逻辑以及绘图 这里我还从书上学到了一个不错的东西 由于在每一次循环中 处理逻辑的时间都不一样 所以造成每一次循环的时间都不同 直接影响了绘制画面的时间 这就可能造成页面刷新不规律 作者有一段代码我觉得挺好的</p>
<pre>
	public void run(){
		while(flag){
			long start = System.currentTimeMillis();
			myDraw();
			login();
			long end = System.currentTimeMillis();
			if(end - start < 50)
				Thread.sleep(50 - end + start);
		}
	}
</pre>
<p>&nbsp;&nbsp;这里设置了每个线程的默认时间是50毫秒 设置了一个开始时间和结束时间 当结束时间 - 开始时间 < 线程默认时间时 线程会暂停 直到到达默认时间后才会继续 而如果超过了这个默认时间 线程则会直接跑下去 这样在一定程度上就解决了这个问题</p>
<p>&nbsp;&nbsp;刚做完这些的时候 我第一反应是做一个这样的游戏 让小球在屏幕中移动 每当触碰到墙壁时会失去一点体力 同时会给与速度增加的惩罚 后来自己玩了会 发现这实在太特么无聊了 估计现在刚回走路的小孩都不会想玩这种游戏 再后来一个比较靠谱的游戏想法出来了</p>
<p>&nbsp;&nbsp;在屏幕中绘制迷宫 小球触碰迷宫墙壁则失败 在迷宫路上放上一些金币之类 获得金币可以加分 但同时小球的速度也会增加 提高了难度 并且只有当小球走出迷宫时才会计算得分 我想了下 觉得这个想法还是很有搞头的 一方面小球移动的控制并没有想象中的简单 这就类似于dota 控制人物移动 但是我的小球是始终移动的 一不小心就会碰壁 同时 吃金币也成了一个很有趣的元素 玩家要努力的去获得高分 但是同时也会影响到生存 想到这个的时候我第一个想到的就是wow中的一句话 活着才有dps ... 笑^-^</p>
<p>&nbsp;&nbsp;不过目前要完成这个游戏 感觉还是有一点难度的 其中我现在还在思考的就是小球与迷宫的碰撞问题 比较迷宫并不是固定的一条线或是一个方块 要想检测他们之间是否碰撞 难道每一次logic 都要去把所有的迷宫墙壁验证一遍吗 同时这种验证只能对于单一的迷宫 如果我要做一个有很多关卡的游戏 那么这个碰撞检测的方法必然要common出来 不然要写傻了</p>
<p>&nbsp;&nbsp;今天就暂时想到这么多了 期待这个游戏完成</p>
<p>&nbsp;&nbsp;2015.3.25</p>
